
# -*- coding: utf-8 -*-
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import datetime as dt

st.set_page_config(page_title="Test diario de productividad", page_icon="‚úÖ", layout="centered")

# ---------------------------
# Par√°metros por defecto (ajustables en la barra lateral)
# ---------------------------
with st.sidebar:
    st.header("Par√°metros del modelo")
    horas_totales = st.number_input("Horas representadas", min_value=2.0, max_value=12.0, value=8.0, step=0.5, help="Longitud del d√≠a en la gr√°fica")
    pendiente_fatiga = st.number_input("Pendiente de fatiga (puntos/hora)", min_value=0.0, max_value=15.0, value=5.0, step=0.5, help="Cu√°nto desciende el 'techo' por hora")
    dur_pomo = st.number_input("Duraci√≥n Pomodoro (min)", min_value=15, max_value=60, value=25, step=5)
    descanso_corto = st.number_input("Descanso corto (min)", min_value=3, max_value=15, value=5, step=1)
    descanso_largo = st.number_input("Descanso largo (min)", min_value=10, max_value=60, value=30, step=5)
    suelo_descanso_corto = st.number_input("Nivel en descanso corto (√ótecho)", min_value=0.0, max_value=1.0, value=0.40, step=0.05)
    suelo_descanso_largo = st.number_input("Nivel en descanso largo (√ótecho)", min_value=0.0, max_value=1.0, value=0.20, step=0.05)

st.title("üß† Test diario de productividad")
st.caption("App creada seg√∫n tus especificaciones: test 0‚Äì3 (con decimales), c√°lculo ponderado, color + horas recomendadas y gr√°fica Matplotlib acorde al patr√≥n 3√ó25‚Äô + descansos.")

# ---------------------------
# Definici√≥n del test (exactamente como en tu documento)
# ---------------------------

ITEMS = [
    {
        "key": "sueno",
        "titulo": "1. Sue√±o (20%)",
        "peso": 20.0,
        "pregunta": "¬øC√≥mo dormiste anoche en **calidad y cantidad**?",
        "explicaciones": {
            0: "Dorm√≠ fatal (<5h, sue√±o interrumpido). ‚ûù Muy mal descanso, memoria y atenci√≥n casi bloqueadas. Jornada muy limitada.",
            1: "Dorm√≠ poco (5‚Äì6h). ‚ûù Arrancas cansado, atenci√≥n corta. 2‚Äì3h √∫tiles como m√°ximo.",
            2: "Dorm√≠ normal (6‚Äì7h). ‚ûù Rindes aceptablemente, aunque no al m√°ximo. Nivel ‚Äúamarillo‚Äù.",
            3: "Dorm√≠ bien (7‚Äì9h, reparador). ‚ûù Alta energ√≠a, memoria y concentraci√≥n. D√≠a ideal para 5‚Äì6h efectivas."
        }
    },
    {
        "key": "energia",
        "titulo": "2. Energ√≠a corporal (10%)",
        "peso": 10.0,
        "pregunta": "¬øC√≥mo notas tu nivel f√≠sico ahora mismo?",
        "explicaciones": {
            0: "Agotado f√≠sicamente. ‚ûù Incluso tareas simples cuestan, no podr√≠as mantenerte sentado mucho tiempo.",
            1: "Energ√≠a baja. ‚ûù Te arrastras un poco, estudiar ser√° m√°s pesado de lo normal.",
            2: "Energ√≠a aceptable. ‚ûù Puedes aguantar varios bloques, aunque sentir√°s fatiga antes.",
            3: "Energ√≠a alta. ‚ûù Te sientes fuerte y descansado, con vitalidad para toda la jornada."
        }
    },
    {
        "key": "dolor",
        "titulo": "3. Dolores o molestias f√≠sicas (2,5%)",
        "peso": 2.5,
        "pregunta": "¬øTienes alg√∫n dolor que pueda distraerte hoy (cabeza, espalda, rodillas, etc.)?",
        "explicaciones": {
            0: "Dolor intenso. ‚ûù Te distrae constantemente, casi imposible concentrarte.",
            1: "Dolor moderado. ‚ûù Molestias que quitan parte de la concentraci√≥n, se nota en cada bloque.",
            2: "Molestia leve. ‚ûù Apenas interfiere, puedes estudiar bien con peque√±as incomodidades.",
            3: "Sin molestias. ‚ûù Est√°s c√≥modo, postura estable, nada te resta concentraci√≥n f√≠sica."
        }
    },
    {
        "key": "concentracion",
        "titulo": "4. Concentraci√≥n (20%)",
        "peso": 20.0,
        "pregunta": "¬øC√≥mo notas tu capacidad de mantener la atenci√≥n ahora mismo?",
        "explicaciones": {
            0: "Atenci√≥n nula. ‚ûù No logras fijar la mente ni en 5 minutos, estudiar ser√≠a tiempo perdido.",
            1: "Muy disperso. ‚ûù Te distraes f√°cil, cuesta entrar en modo estudio.",
            2: "Atenci√≥n aceptable. ‚ûù Puedes concentrarte, aunque con esfuerzo extra y riesgo de distracciones.",
            3: "Atenci√≥n alta. ‚ûù Mente clara, puedes sumergirte en el estudio sin apenas dispersi√≥n."
        }
    },
    {
        "key": "memoria",
        "titulo": "5. Memoria activa (10%)",
        "peso": 10.0,
        "pregunta": "¬øC√≥mo notas tu capacidad de recordar lo que estudiaste ayer o recientemente?",
        "explicaciones": {
            0: "Muy mala memoria. ‚ûù Casi no recuerdas nada, incluso lo b√°sico se te escapa.",
            1: "Memoria floja. ‚ûù Recuerdas fragmentos sueltos, con bastante esfuerzo.",
            2: "Memoria aceptable. ‚ûù Retienes lo esencial, aunque pierdes algunos detalles.",
            3: "Memoria fresca. ‚ûù Recuerdas f√°cilmente lo que estudiaste, lo tienes ‚Äúa mano‚Äù en la mente."
        }
    },
    {
        "key": "agilidad",
        "titulo": "6. Agilidad mental (5%)",
        "peso": 5.0,
        "pregunta": "¬øC√≥mo notas tu rapidez para procesar ideas y relacionar conceptos?",
        "explicaciones": {
            0: "Muy lento. ‚ûù Te cuesta incluso resolver ideas simples o seguir un hilo l√≥gico.",
            1: "Lento. ‚ûù Procesas la informaci√≥n, pero con bastante esfuerzo y demora.",
            2: "Normal. ‚ûù Funcionas bien, aunque no con m√°xima claridad.",
            3: "√Ågil. ‚ûù Piensas r√°pido, conectas ideas y entiendes conceptos al vuelo."
        }
    },
    {
        "key": "motivacion",
        "titulo": "7. Motivaci√≥n (20%)",
        "peso": 20.0,
        "pregunta": "¬øQu√© ganas tienes de ponerte a estudiar hoy?",
        "explicaciones": {
            0: "Sin motivaci√≥n. ‚ûù Te costar√° sentarte, resistencia interna muy alta.",
            1: "Ganas bajas. ‚ûù Lo har√°s por obligaci√≥n, con poca energ√≠a mental.",
            2: "Motivaci√≥n aceptable. ‚ûù Quieres avanzar, aunque no con todo el entusiasmo.",
            3: "Muy motivado. ‚ûù Ves el objetivo claro y estudias con energ√≠a y constancia."
        }
    },
    {
        "key": "estres",
        "titulo": "8. Estr√©s / Ansiedad (7,5%)",
        "peso": 7.5,
        "pregunta": "¬øC√≥mo te notas en cuanto a nervios o presi√≥n hoy?",
        "explicaciones": {
            0: "Estr√©s extremo. ‚ûù La ansiedad bloquea tu capacidad de concentraci√≥n y memoria.",
            1: "Estr√©s notable. ‚ûù Tensi√≥n clara que interfiere en tu rendimiento.",
            2: "Estr√©s moderado. ‚ûù Notas cierta presi√≥n, pero manejable.",
            3: "Serenidad. ‚ûù Estado tranquilo y estable, condiciones √≥ptimas para estudiar."
        }
    },
    {
        "key": "animo",
        "titulo": "9. Estado de √°nimo (2,5%)",
        "peso": 2.5,
        "pregunta": "¬øC√≥mo te notas en cuanto a humor y emociones hoy?",
        "explicaciones": {
            0: "Muy bajo. ‚ûù Apat√≠a, desgana total, dif√≠cil mantener la constancia.",
            1: "√Ånimo bajo. ‚ûù Falta de entusiasmo, cuesta empezar y mantener el ritmo.",
            2: "√Ånimo neutro. ‚ûù Normal, ni positivo ni negativo, puedes rendir bien.",
            3: "√Ånimo positivo. ‚ûù Optimista, predispuesto a estudiar, con buena energ√≠a emocional."
        }
    },
    {
        "key": "alimentacion",
        "titulo": "10. Alimentaci√≥n / Hidrataci√≥n (2,5%)",
        "peso": 2.5,
        "pregunta": "¬øC√≥mo has empezado el d√≠a en este aspecto?",
        "explicaciones": {
            0: "Muy mal. ‚ûù Sin comer ni beber, sin energ√≠a m√≠nima para rendir.",
            1: "Flojo. ‚ûù Comida insuficiente o pesada que resta energ√≠a.",
            2: "Aceptable. ‚ûù Has comido/bebido lo suficiente, aunque mejorable.",
            3: "Bien. ‚ûù Buena nutrici√≥n e hidrataci√≥n, energ√≠a estable y sin pesadez."
        }
    }
]

PESOS_TOTAL = sum(item["peso"] for item in ITEMS)
assert abs(PESOS_TOTAL - 100.0) < 1e-6, "Los pesos no suman 100%"

# ---------------------------
# Estado de sesi√≥n
# ---------------------------
if "paso" not in st.session_state:
    st.session_state.paso = 0
if "respuestas" not in st.session_state:
    st.session_state.respuestas = {item["key"]: None for item in ITEMS}
if "historial" not in st.session_state:
    st.session_state.historial = []  # lista de dicts

# ---------------------------
# Funciones
# ---------------------------

def calcular_porcentaje(respuestas):
    total = 0.0
    for item in ITEMS:
        val = respuestas.get(item["key"], 0.0)
        # clamp input a [0,3]
        val = max(0.0, min(3.0, float(val)))
        contrib = (val / 3.0) * item["peso"]
        total += contrib
    # redondeo 1 decimal y l√≠mites
    total = round(min(100.0, max(0.0, total)), 1)
    return total

def color_y_horas(pct):
    if pct >= 85.0:
        return ("Verde", "5‚Äì6 h netas. D√≠a para temas nuevos + repasos exigentes.")
    if pct >= 70.0:
        return ("Amarillo", "3‚Äì4 h netas. Prioriza lo importante.")
    if pct >= 50.0:
        return ("Naranja", "2‚Äì3 h suaves. Repasos y tareas ligeras.")
    return ("Rojo", "1‚Äì2 h muy ligeras o descanso.")

def simular_curva(pct_inicial, horas_total, pendiente_fatiga, dur_pomo, descanso_corto, descanso_largo, suelo_corto, suelo_largo):
    """
    Devuelve tiempos (en horas) y productividad (%) seg√∫n patr√≥n de pomodoros 3√ó25' + descansos (5/5/30), repetido.
    - El 'techo' cae linealmente: techo(t) = max(0, pct_inicial - pendiente_fatiga * t_horas)
    - Dentro de cada pomodoro hacemos una 'joroba' suave: sube r√°pido y decae suavemente.
    - Descansos: niveles planos como fracci√≥n del techo.
    """
    minutos_total = int(horas_total * 60)
    t = np.arange(0, minutos_total + 1)  # minuto a minuto
    y = np.zeros_like(t, dtype=float)

    # Patr√≥n por ciclo: estudio, descanso corto, estudio, descanso corto, estudio, descanso largo
    pattern = [
        ("study", dur_pomo),
        ("short", descanso_corto),
        ("study", dur_pomo),
        ("short", descanso_corto),
        ("study", dur_pomo),
        ("long", descanso_largo),
    ]

    idx = 0
    while idx < len(t):
        for tipo, dur in pattern:
            if idx >= len(t):
                break
            tramo = min(dur, len(t) - idx)
            for j in range(tramo):
                minutos_abs = idx + j
                horas_abs = minutos_abs / 60.0
                techo = max(0.0, pct_inicial - pendiente_fatiga * horas_abs)
                if tipo == "study":
                    # Curva "joroba": arranque r√°pido y declive suave hacia el final del pomodoro
                    s = j / float(max(1, dur - 1))  # 0..1
                    # Arranque con impulso (primeros 3 minutos recuperas)
                    if j < min(3, dur):
                        ramp = 0.85 + 0.15 * (j / float(max(1, 3 - 1)))  # 0.85->1.0
                    else:
                        ramp = 1.0
                    # Decaimiento suave hasta ~0.85 del techo al final
                    decaimiento = 1.0 - 0.15 * s
                    y[minutos_abs] = techo * ramp * decaimiento
                elif tipo == "short":
                    y[minutos_abs] = techo * suelo_corto
                else:  # long
                    y[minutos_abs] = techo * suelo_largo
            idx += tramo
            if idx >= len(t):
                break

    return t / 60.0, y

def mostrar_resultados(pct, color, recomendacion, serie_t, serie_y):
    st.subheader("Resultados del d√≠a")
    c1, c2, c3 = st.columns(3)
    c1.metric("Productividad ponderada", f"{pct:.1f}%")
    c2.metric("Color", color)
    c3.metric("Horas recomendadas", recomendacion.split(".")[0] + ".")

    st.write(f"**Recomendaci√≥n:** {recomendacion}")

    # Gr√°fica Matplotlib
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(serie_t, serie_y, label=f"Inicio: {pct:.1f}%", linewidth=2.0)
    ax.axhline(50, linestyle="--", color="black", label="Umbral 50%")
    ax.set_title(f"Curva de productividad personalizada ({dt.date.today().isoformat()})")
    ax.set_xlabel("Horas de estudio")
    ax.set_ylabel("Productividad relativa (%)")
    ax.grid(True, alpha=0.3)
    ax.set_ylim(0, max(105, max(serie_y) + 5))
    ax.set_xlim(0, serie_t[-1] if len(serie_t) else 8)
    ax.legend(loc="upper right")
    st.pyplot(fig, clear_figure=True)

    # Bot√≥n para descargar PNG
    import io
    buf = io.BytesIO()
    fig.savefig(buf, format="png", dpi=160, bbox_inches="tight")
    st.download_button("‚¨áÔ∏è Descargar gr√°fica (PNG)", data=buf.getvalue(), file_name=f"curva_productividad_{dt.date.today().isoformat()}.png", mime="image/png")

# ---------------------------
# UI flujo paso a paso
# ---------------------------
st.markdown("**Flujo diario:** pulsa ‚ÄúEmpezar test‚Äù y responde a las 10 preguntas (0‚Äì3, se aceptan decimales como 2.5).")

if st.button("üü¢ Empezar test", disabled=st.session_state.paso>0):
    st.session_state.paso = 1

if 1 <= st.session_state.paso <= len(ITEMS):
    idx = st.session_state.paso - 1
    item = ITEMS[idx]

    st.markdown(f"### {item['titulo']}")
    st.write(item["pregunta"])

    with st.expander("¬øQu√© significa 0‚Äì3 exactamente?"):
        for k in [0, 1, 2, 3]:
            st.markdown(f"**{k} ‚Üí** {item['explicaciones'][k]}")

    val = st.number_input("Tu puntuaci√≥n (0‚Äì3, acepta decimales)", min_value=0.0, max_value=3.0, step=0.1, key=f"input_{item['key']}")

    cols = st.columns([1,1,1])
    if cols[0].button("‚üµ Atr√°s", disabled=st.session_state.paso == 1):
        st.session_state.paso -= 1
        st.stop()

    if cols[1].button("Guardar respuesta"):
        st.session_state.respuestas[item["key"]] = float(val)

    if cols[2].button("Siguiente ‚ü∂"):
        if st.session_state.respuestas[item["key"]] is None:
            st.warning("Guarda la respuesta antes de continuar.")
            st.stop()
        st.session_state.paso += 1
        st.stop()

elif st.session_state.paso > len(ITEMS):
    # Calcular resultados
    pct = calcular_porcentaje(st.session_state.respuestas)
    color, recomendacion = color_y_horas(pct)

    # Simular curva
    t_h, y_pct = simular_curva(
        pct_inicial=pct,
        horas_total=horas_totales,
        pendiente_fatiga=pendiente_fatiga,
        dur_pomo=dur_pomo,
        descanso_corto=descanso_corto,
        descanso_largo=descanso_largo,
        suelo_corto=suelo_descanso_corto,
        suelo_largo=suelo_descanso_largo,
    )

    mostrar_resultados(pct, color, recomendacion, t_h, y_pct)

    # Guardar en historial
    if st.button("üíæ Guardar en historial de hoy"):
        entrada = {
            "fecha": dt.date.today().isoformat(),
            "porcentaje": pct,
            "color": color,
            "recomendacion": recomendacion,
            "respuestas": st.session_state.respuestas.copy(),
            "parametros": {
                "horas_totales": horas_totales,
                "pendiente_fatiga": pendiente_fatiga,
                "dur_pomo": dur_pomo,
                "descanso_corto": descanso_corto,
                "descanso_largo": descanso_largo,
                "suelo_descanso_corto": suelo_descanso_corto,
                "suelo_descanso_largo": suelo_descanso_largo,
            }
        }
        st.session_state.historial.append(entrada)
        st.success("Guardado en historial.")

    # Mostrar/descargar historial
    if st.session_state.historial:
        st.subheader("Historial")
        st.dataframe(st.session_state.historial, use_container_width=True)
        import json
        st.download_button(
            "‚¨áÔ∏è Descargar historial (JSON)",
            data=json.dumps(st.session_state.historial, ensure_ascii=False, indent=2).encode("utf-8"),
            file_name="historial_productividad.json",
            mime="application/json"
        )

    # Reiniciar
    if st.button("üîÅ Reiniciar test"):
        st.session_state.paso = 0
        st.session_state.respuestas = {item["key"]: None for item in ITEMS}
        st.experimental_rerun()

else:
    st.info("Pulsa **Empezar test** para iniciar.")
